{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome cmdcomp","text":"<p>cmdcomp generate command shell completion file from config file.</p> <p></p>"},{"location":"#features","title":"Features","text":"<ul> <li>Simple, intuitive and declarative configuration file.</li> <li>Support for multiple configuration file formats (<code>json</code>, <code>yaml</code>, <code>toml</code>).</li> <li>Support multiple shell (<code>bash</code>, <code>zsh</code>).</li> <li>Support for writing configuration files using jinja`.</li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#pypi","title":"PyPi","text":"<p>Instration is as simple as:</p> <pre><code>pip install cmdcomp\n</code></pre> <p>Recommendation</p> <p>You can also use pipx to install <code>cmdcomp</code> in a application dedicated virtual environment created for you.</p> <pre><code>pipx install cmdcomp\n</code></pre>"},{"location":"installation/#docker","title":"Docker","text":"<p>To run on Docker, you can do the following</p> <pre><code>docker run --rm -itv $(pwd):/app/cmdcomp yassun7010/cmdcomp --file ${YOUR_CONFIG_FILE} --shell-type bash\n</code></pre>"},{"location":"usage/","title":"Overview","text":""},{"location":"usage/#run-it","title":"Run it","text":"The simplest example<pre><code>cmdcmp --file config.yaml --shell-type bash\n</code></pre> Help<pre><code>$ cmdcomp --help\nUsage: cmdcomp [-h] [--version] [--verbose | --no-verbose] --file FILE\n               --shell-type {bash,zsh} [--output-file OUTPUT_FILE]\n\nshell completion file generator.\n\nOptions:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n  --verbose, --no-verbose\n                        output verbose log.\n  --file, --config, -f FILE\n                        config file path. supported formats are \".json\",\n                        \".yaml\", \".toml\" and \".jinja\".\n  --shell-type {bash,zsh}\n                        target shell type.\n  --output-file, -o OUTPUT_FILE\n                        output file path. default is stdout.\n</code></pre>"},{"location":"usage/#config","title":"Config","text":"<p>cmdcomp automatically generates a completion file according to the contents of the configuration file.</p> <p>The overall structure of the configuration file is shown below.</p> <pre><code>cmdcomp:\n  version: \"2\"\napp:\n  {{ App }}\nroot:\n  {{ Command }}\n</code></pre> <p>More detailed information is given in the next section.</p> <p>Please refer to JSON Schema for exact schema information.</p> <p>Tip</p> <p>jinja is also supported.</p> <p>This is useful when you want to group duplicate settings into a variable.</p> config.yaml.jinja2<pre><code>{%- set app_name = \"mycli\" -%}\ncmdcomp:\n  version: \"2\"\napp:\n  name: {{ app_name }}\nroot:\n  arguments:\n    --help:\n</code></pre> <pre><code>cmdcomp --file config.yaml.jinja2 --shell-type bash\n</code></pre> <p>Tip</p> <p>You can use <code>json</code> <code>yaml</code> <code>toml</code> for the format of the config file, but I recommend <code>yaml</code> for configuration.</p> <p>The yaml language server gives  the best development experience as an extension available for VSCode.</p> <p>I have added the following configuration to VSCode, which makes it easier to write configuration files.</p> .vscode/settings.json<pre><code>{\n    \"yaml.schemas\": {\n        \"https://raw.githubusercontent.com/yassun7010/cmdcomp/main/docs/config.schema.json\": \"*_cmdcomp.yaml\"\n    },\n}\n</code></pre>"},{"location":"usage/app/","title":"App","text":"<p><code>app</code> describes the settings for the cli app for which the completion file is to be created.</p> <p>The complete configuration items are as follows.</p> yamltoml <pre><code>app:\n  name: mycli\n  alias: my-cli\n</code></pre> <pre><code>[app]\nname = \"mycli\"\nalias = \"my-cli\"\n</code></pre> Property Required Type Description name \u2705 <code>str</code> cli app name. alias `str list[str]"},{"location":"usage/argument/","title":"Argument","text":"<p>This item sets the completion candidates for each command argument.</p>"},{"location":"usage/argument/#select-argument","title":"Select Argument","text":"<p>If you want to choise several candidates, use <code>select</code> type argument.</p> yamltoml <pre><code>cmdcomp:\n  version: \"2\"\napp:\n  name: mycli\nroot:\n  arguments:\n    --format:\n      type: select\n      description: output format.\n      options:\n        - json\n        - yaml\n        - toml\n</code></pre> <pre><code>[cmdcomp]\nversion = \"2\"\n\n[app]\nname = \"mycli\"\n\n[root.arguments.--format]\ntype = \"select\"\ndescription = \"output format.\"\noptions = [\"json\", \"yaml\", \"toml\"]\n</code></pre>"},{"location":"usage/argument/#file-argument","title":"File Argument","text":"<p>If you want the output to be a candidate for file path completion, the <code>file</code> type is recommended.</p> yamltoml <pre><code>cmdcomp:\n  version: \"2\"\napp:\n  name: mycli\nroot:\n  arguments:\n    --output:\n      type: file\n      description: output filename.\n</code></pre> <pre><code>[cmdcomp]\nversion = \"2\"\n\n[app]\nname = \"mycli\"\n\n[root.arguments.--output]\ntype = \"file\"\ndescription = \"output filename.\"\n</code></pre> <p>By default, it outputs completion candidates starting from the current directory of the shell, but you can change the starting directory by specifying <code>base_path</code>.</p> yamltoml <pre><code>cmdcomp:\n  version: \"2\"\napp:\n  name: mycli\nroot:\n  arguments:\n    --list:\n      type: file\n      description: list my command targets.\n      base_path: $HOME/.mycmd/targets\n</code></pre> <pre><code>[cmdcomp]\nversion = \"2\"\n\n[app]\nname = \"mycli\"\n\n[root.arguments.--list]\ntype = \"file\"\ndescription = \"list my command targets.\"\nbase_path = \"$HOME/.mycmd/targets\"\n</code></pre> <p>For more complex conditions, such as outputting only files with a specific file extension, consider using the command type.</p>"},{"location":"usage/argument/#command-argument","title":"Command Argument","text":"<p>If you want to make the result of executing any command a completion candidate, use the <code>command</code> type.</p> yamltoml <pre><code>cmdcomp:\n  version: \"2\"\napp:\n  name: mycli\nroot:\n  arguments:\n    --start-date:\n      type: command\n      description: start date.\n      execute: date +%Y-%m-%d\n</code></pre> <pre><code>[cmdcomp]\nversion = \"2\"\n\n[app]\nname = \"mycli\"\n\n[root.arguments.--start-date]\ntype = \"command\"\ndescription = \"start date.\"\nexecute = \"date +%Y-%m-%d\"\n</code></pre>"},{"location":"usage/command/","title":"Command","text":"<p>This item sets the completion candidates for each command.</p> <p>The complete configuration items are as follows.</p> <p>The overall structure of the Command is shown below.</p> Use positional argumentsUse subcommandsUse delegate <pre><code>description: command description.\nalias: cmd-alias\narguments:\n  1: {{ Argument }}\n  --help: {{ Argument }}\n  \"*\": {{ Argument }}\n</code></pre> Property Required Type Description description <code>str | None</code> command description. alias <code>str | list[str] | None</code> command alias. arguments <code>dict[str | int, Argument]</code> command arguments. <p>The following 3 types of <code>arguments</code> keys are available.</p> Examples Description <code>1</code>, <code>2</code> Positional argument. <code>\"--help\"</code>, <code>\"-v\"</code> Keyword argument. <code>\"*\"</code> Wildcard argument (The same rule applies to all positions not specified in the positional argument). <pre><code>description: command description.\nalias: cmd-alias\narguments:\n  --verbose: {{ Argument }}\n  --help: {{ Argument }}\nsubcommands:\n  list: {{ Command }}\n  run: {{ Command }}\n</code></pre> Property Required Type Description description <code>str | None</code> command description. alias <code>str | list[str] | None</code> command alias. arguments <code>dict[str | int, Argument]</code> command arguments. subcommands <code>dict[str, Command]</code> Subcommands. <p>The following 3 types of <code>arguments</code> keys are available.</p> Examples Description <code>\"--help\"</code>, <code>\"-v\"</code> Keyword argument. <pre><code>type: delegate\ndescription: command description.\naliad: cmd-alias\ntarget: aws\n</code></pre> Property Required Type Description type \u2705 <code>Literal[\"delegate\"]</code> command type. description <code>str | None</code> command description. alias <code>str | list[str] | None</code> command alias. target \u2705 <code>str | list[str]</code> delegate target."}]}